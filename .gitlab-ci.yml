stages:
  - build
  - test
  - integration-test
  - deploy

build-production:
  stage: build
  only:
    - merge_requests
    - main
  image:
    name: gcr.io/kaniko-project/executor:v1.9.0-debug
    entrypoint: [""]
  script:
    - /kaniko/executor
      --context "${CI_PROJECT_DIR}/litter-service"  
      --dockerfile "${CI_PROJECT_DIR}/litter-service/Dockerfile.production"
      --destination "${CI_REGISTRY_IMAGE}/litter:${CI_COMMIT_TAG:-latest}"
    - /kaniko/executor
      --context "${CI_PROJECT_DIR}/auth-service"  
      --dockerfile "${CI_PROJECT_DIR}/auth-service/Dockerfile.production"
      --destination "${CI_REGISTRY_IMAGE}/auth-service:${CI_COMMIT_TAG:-latest}"
    - /kaniko/executor
      --context "${CI_PROJECT_DIR}/lits-service"  
      --dockerfile "${CI_PROJECT_DIR}/lits-service/Dockerfile.production"
      --destination "${CI_REGISTRY_IMAGE}/lits-service:${CI_COMMIT_TAG:-latest}"
    - /kaniko/executor
      --context "${CI_PROJECT_DIR}/litter-client"  
      --dockerfile "${CI_PROJECT_DIR}/litter-client/Dockerfile.production"
      --destination "${CI_REGISTRY_IMAGE}/litter-client:${CI_COMMIT_TAG:-latest}"

build-staging:
  stage: build
  only:
    - merge_requests
    - main
  image:
    name: gcr.io/kaniko-project/executor:v1.9.0-debug
    entrypoint: [""]
  script:
    - /kaniko/executor
      --context "${CI_PROJECT_DIR}/litter-service"  
      --dockerfile "${CI_PROJECT_DIR}/litter-service/Dockerfile.production"
      --destination "${CI_REGISTRY_IMAGE}/litter:${CI_COMMIT_TAG:-latest}"
    - /kaniko/executor
      --context "${CI_PROJECT_DIR}/auth-service"  
      --dockerfile "${CI_PROJECT_DIR}/auth-service/Dockerfile.production"
      --destination "${CI_REGISTRY_IMAGE}/auth-service:${CI_COMMIT_TAG:-latest}"
    - /kaniko/executor
      --context "${CI_PROJECT_DIR}/lits-service"  
      --dockerfile "${CI_PROJECT_DIR}/lits-service/Dockerfile.production"
      --destination "${CI_REGISTRY_IMAGE}/lits-service:${CI_COMMIT_TAG:-latest}"
    - /kaniko/executor
      --context "${CI_PROJECT_DIR}/litter-client"  
      --dockerfile "${CI_PROJECT_DIR}/litter-client/Dockerfile.staging"
      --destination "${CI_REGISTRY_IMAGE}/litter-client-staging:${CI_COMMIT_TAG:-latest}"

# lint-test-litter-client:
#   stage: test
#   image: node:18-alpine
#   script:
#     - cd litter-client
#     - npm install
#     - npm run lint

unit-test-auth-service:
  stage: test
  image: node:18-alpine
  script:
    - cd auth-service
    - npm install
    - npm run test

lint-test-auth-service:
  stage: test
  image: node:18-alpine
  script:
    - cd auth-service
    - npm install
    - npm run lint

unit-test-lits-service:
  stage: test
  image: node:18-alpine
  script:
    - cd lits-service
    - npm install
    - npm run test

lint-test-lits-service:
  stage: test
  image: node:18-alpine
  script:
    - cd lits-service
    - npm install
    - npm run lint

deploy-staging:
  stage: integration-test
  only:
    - merge_requests
    - main
  image:
    name: gcr.io/k8s-skaffold/skaffold:v2.0.0
    entrypoint: ['']
  environment:
    name: staging
    url: $LITTER_URL_STAGING # Set as environment variable. URL to your application. Ie HTTP://cscloud6-25.lnu.se
  script:
    - kubectl config get-contexts
   # Configure kubectl to use our own k8s cluster, you need to setup an Gitlab agent in you k8s kluster
    - kubectl config use-context $K8S_CONTEXT_STAGING
   # Authorize the cluster to pull images from our registry. (synced against Deploy Token "gitlab-deploy-token")
    - kubectl delete secret regcred || true
    - kubectl create secret docker-registry regcred --docker-server=$CI_REGISTRY --docker-username=$CI_DEPLOY_USER --docker-password=$CI_DEPLOY_PASSWORD
    # Auth-secrets.
    - kubectl delete secret auth-secrets || true
    - kubectl create secret generic auth-secrets --from-literal=JWT_PRIVATE_KEY=$JWT_PRIVATE_KEY_STAGING --from-literal=JWT_PUBLIC_KEY=$JWT_PUBLIC_KEY_STAGING
    # Lits-secrets
    - kubectl delete secret lits-secrets || true
    - kubectl create secret generic lits-secrets --from-literal=JWT_PUBLIC_KEY=$JWT_PUBLIC_KEY_STAGING

    - kubectl apply 
      -f ./k8s/litter-service.yaml
      -f ./auth-service/k8s/auth-deployment.yaml
      -f ./auth-service/k8s/auth-service.yaml
      -f ./auth-service/k8s/mongodb-service.yaml
      -f ./auth-service/k8s/mongodb-deployment.yaml
      -f ./auth-service/k8s/mongodb-pvc.yaml
      -f ./auth-service/k8s/mongodb-pv.yaml
      -f ./k8s/lits-service.yaml
      -f ./k8s/mongodb-lits.yaml
      -f ./k8s/litter-client-staging.yaml

    - kubectl rollout restart deployment litter
    - kubectl rollout restart deployment auth-service
    - kubectl rollout restart deployment lits
    - kubectl rollout restart deployment client

   # Debugging outputs after completion
    - kubectl get deployments
    - kubectl get pods
    - kubectl get services

deploy:
  stage: deploy
  only:
    - merge_requests
    - main
  image:
    name: gcr.io/k8s-skaffold/skaffold:v2.0.0
    entrypoint: ['']
  environment:
    name: production
    url: $LITTER_URL # Set as environment variable. URL to your application. Ie HTTP://cscloud6-25.lnu.se
  when: manual
  script:
    - kubectl config get-contexts
   # Configure kubectl to use our own k8s cluster, you need to setup an Gitlab agent in you k8s kluster
    - kubectl config use-context $K8S_CONTEXT
   # Authorize the cluster to pull images from our registry. (synced against Deploy Token "gitlab-deploy-token")
    - kubectl delete secret regcred || true
    - kubectl create secret docker-registry regcred --docker-server=$CI_REGISTRY --docker-username=$CI_DEPLOY_USER --docker-password=$CI_DEPLOY_PASSWORD
    # Auth-secrets.
    - kubectl delete secret auth-secrets || true
    - kubectl create secret generic auth-secrets --from-literal=JWT_PRIVATE_KEY=$JWT_PRIVATE_KEY_STAGING --from-literal=JWT_PUBLIC_KEY=$JWT_PUBLIC_KEY_STAGING
    # Lits-secrets
    - kubectl delete secret lits-secrets || true
    - kubectl create secret generic lits-secrets --from-literal=JWT_PUBLIC_KEY=$JWT_PUBLIC_KEY_STAGING


    - kubectl apply 
      -f ./k8s/litter-client.yaml
      -f ./k8s/litter-service.yaml
      -f ./auth-service/k8s/auth-deployment.yaml
      -f ./auth-service/k8s/auth-service.yaml
      -f ./auth-service/k8s/mongodb-service.yaml
      -f ./auth-service/k8s/mongodb-deployment.yaml
      -f ./auth-service/k8s/mongodb-pvc.yaml
      -f ./auth-service/k8s/mongodb-pv.yaml
      -f ./k8s/lits-service.yaml
      -f ./k8s/mongodb-lits.yaml


    - kubectl rollout restart deployment litter
    - kubectl rollout restart deployment auth-service
    - kubectl rollout restart deployment lits
    - kubectl rollout restart deployment client
  
   # Debugging outputs after completion
    - kubectl get deployments
    - kubectl get pods
    - kubectl get services

